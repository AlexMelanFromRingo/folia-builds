name: folia-custom

on:
  workflow_dispatch:  # Позволяет запускать workflow вручную через интерфейс GitHub
  schedule:
    - cron: "0 12 * * *"  # Сборка в 12:00 по Киеву (UTC+3 летом)

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Set the git information
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
      - uses: actions/checkout@v4

      # Настроим временную зону на Киев
      - name: Set timezone to Kyiv
        run: |
          sudo timedatectl set-timezone Europe/Kiev

      # Получаем текущую дату для релиза
      - name: Get date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d')"

      # Список веток, которые нужно собрать (с версиями для Java 17 и Java 21)
      - name: Set branches list
        id: branches
        run: echo "::set-output name=branches::ver/1.19.4 ver/1.20.4 ver/1.20.6 ver/old-java-branch1 ver/old-java-branch2"

      # Создание релиза с тегом
      - name: Create GitHub release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "release-${{ steps.date.outputs.date }}"
          release_name: "Release for ${{ steps.date.outputs.date }}"
          body: |
            This release contains the builds for the specified branches.
          draft: false
          prerelease: false

      # Цикл по всем веткам для их сборки
      - name: Build and Upload for all specified branches
        run: |
          # Преобразуем список веток в массив
          branches="${{ steps.branches.outputs.branches }}"
          IFS=' ' read -r -a branch_array <<< "$branches"  # Разделяем строку на массив по пробелам

          for branch in "${branch_array[@]}"; do  # Используем массив в цикле
            echo "Building branch: $branch"
            rm -rf ~/folia
            git clone https://github.com/PaperMC/Folia.git ~/folia -b $branch
            cd ~/folia
            
            # Определяем, какая версия JDK использовать в зависимости от ветки
            if [[ "$branch" == ver/1.19.4 || "$branch" == ver/1.20.4 || "$branch" == ver/1.20.6 ]]; then
              echo "Using JDK 21 for branch $branch"
              # Устанавливаем JDK 21 для этих веток
              uses: actions/setup-java@v4
              with:
                java-version: 21
                distribution: 'zulu'
              ./gradlew applyPatches
              ./gradlew createMojmapPaperclipJar
            else
              echo "Using JDK 17 for branch $branch"
              # Для веток с Java 17 устанавливаем JDK 17 и используем другую команду сборки
              uses: actions/setup-java@v4
              with:
                java-version: 17
                distribution: 'zulu'
              ./gradlew build  # Используем другую команду сборки для старых версий
            fi
            
            # Получаем имя JAR файла для каждой ветки
            JAR_NAME=$(ls ~/folia/build/libs/ | grep paperclip)
            
            # Загружаем JAR файл каждой ветки в общий релиз
            echo "Uploading $JAR_NAME for $branch"
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/java-archive" \
              --data-binary @~/folia/build/libs/$JAR_NAME \
              "${{ steps.create_release.outputs.upload_url }}?name=$branch-$JAR_NAME"
          done

    permissions:
      contents: write
