name: folia

on:
  workflow_dispatch:  # Позволяет запускать вручную
  schedule:
    - cron: "0 12 * * *"  # Сборка в 12:00 по Киеву (UTC+3 летом)

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Устанавливаем глобальные настройки Git
      - name: Set the git information
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"  # Бот с официальным email

      # Клонируем репозиторий
      - uses: actions/checkout@v4

      # Устанавливаем JDK 21
      - name: JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'zulu'

      # Настроим временную зону на Киев
      - name: Set timezone to Kyiv
        run: |
          sudo timedatectl set-timezone Europe/Kiev

      # Клонируем основной репозиторий один раз и применяем патчи
      - name: Clone and apply patches
        run: |
          git clone https://github.com/PaperMC/Folia.git ~/folia
          cd ~/folia
          ./gradlew applyPatches  # Применяем патчи

      # Получаем список всех веток
      - name: Get all branches
        id: branches
        run: |
          git fetch --all
          branches=$(git branch -r | grep -v '\->' | sed 's/origin\///' | tr '\n' ' ')
          echo "::set-output name=branches::${branches}"

      # Сборка всех веток с различными командами в зависимости от ветки
      - name: Build and release for each branch
        run: |
          for branch in ${{ steps.branches.outputs.branches }}; do
            echo "Building branch: $branch"

            # Клонируем репозиторий для каждой ветки в отдельную директорию
            branch_dir=~/folia_$branch
            git clone --single-branch --branch $branch https://github.com/PaperMC/Folia.git $branch_dir
            cd $branch_dir

            # Убедимся, что файл gradlew существует
            if [ ! -f "./gradlew" ]; then
              echo "ERROR: gradlew not found in $branch_dir!"
              exit 1
            fi

            # Применяем патчи для каждой ветки
            ./gradlew applyPatches

            # Выполняем сборку в зависимости от ветки
            if [ "$branch" == "master" ]; then
              echo "Running build for master branch"
              ./gradlew createMojmapPaperclipJar
            elif [[ "$branch" =~ ^ver/1\.19\.[0-9]+$ ]]; then
              echo "Running build for $branch"
              ./gradlew createReobfBundlerJar
            elif [[ "$branch" =~ ^ver/1\.20\.[0-9]+$ ]]; then
              echo "Running build for $branch"
              ./gradlew createMojmapPaperclipJar
            else
              echo "Branch $branch is not a supported version, skipping build."
            fi

            BUILD_DATE=$(date +'%Y-%m-%d')
            JAR_NAME=$(ls build/libs/ | grep paperclip)

            # Создаём релиз для каждой ветки
            RELEASE_NAME="Release-${branch}-${BUILD_DATE}"
            TAG_NAME="release-${branch}-${BUILD_DATE}"
            echo "Creating release for ${branch}..."

            release_response=$(curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -d '{
                    "tag_name": "'"${TAG_NAME}"'",
                    "name": "'"${RELEASE_NAME}"'",
                    "draft": false,
                    "prerelease": false
                  }' \
              https://api.github.com/repos/PaperMC/Folia/releases)

            upload_url=$(echo "$release_response" | jq -r '.upload_url' | sed 's/{?name,label}//')

            # Загружаем собранный JAR файл как asset
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/java-archive" \
              --data-binary @build/libs/$JAR_NAME \
              "$upload_url?name=$JAR_NAME"
          done
